//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using Clay.Enums;
using Smark.Data;
using Smark.Data.Mappings;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


namespace Clay.Modules {
    
    
    /// <summary>
    /// Smark.Data Generator Copyright © FanJianHan 2010-2012
    /// website:http://www.ikende.com
    /// </summary>
    [Serializable()]
    [Table()]
    public partial class MControl : Smark.Data.Mappings.DataObject, IMControl {
        
        private string mID;
        
        /// <summary>
        /// System.String
        /// </summary>
        public static Smark.Data.FieldInfo iD = new Smark.Data.FieldInfo("MControl", "ID");
        
        private ControlType mType;
        
        /// <summary>
        /// ControlType
        /// </summary>
        public static Smark.Data.FieldInfo type = new Smark.Data.FieldInfo("MControl", "Type");
        
        private string mParentID;
        
        /// <summary>
        /// System.String
        /// </summary>
        public static Smark.Data.FieldInfo parentID = new Smark.Data.FieldInfo("MControl", "ParentID");
        
        private string mRemark;
        
        /// <summary>
        /// System.String
        /// </summary>
        public static Smark.Data.FieldInfo remark = new Smark.Data.FieldInfo("MControl", "Remark");
        
        private string mWidth;
        
        /// <summary>
        /// System.String
        /// </summary>
        public static Smark.Data.FieldInfo width = new Smark.Data.FieldInfo("MControl", "Width");
        
        private bool mClear;
        
        /// <summary>
        /// System.Boolean
        /// </summary>
        public static Smark.Data.FieldInfo clear = new Smark.Data.FieldInfo("MControl", "Clear");
        
        private FloatType mFloat;
        
        /// <summary>
        /// FloatType
        /// </summary>
        public static Smark.Data.FieldInfo @float = new Smark.Data.FieldInfo("MControl", "Float");
        
        private bool mIsPanel;
        
        /// <summary>
        /// System.Boolean
        /// </summary>
        public static Smark.Data.FieldInfo isPanel = new Smark.Data.FieldInfo("MControl", "IsPanel");
        
        private bool mIsViewItem;
        
        /// <summary>
        /// System.Boolean
        /// </summary>
        public static Smark.Data.FieldInfo isViewItem = new Smark.Data.FieldInfo("MControl", "IsViewItem");
        
        private int mLevel;
        
        /// <summary>
        /// System.Int32
        /// </summary>
        public static Smark.Data.FieldInfo level = new Smark.Data.FieldInfo("MControl", "Level");
        
        private string mModuleName;
        
        /// <summary>
        /// System.String
        /// </summary>
        public static Smark.Data.FieldInfo moduleName = new Smark.Data.FieldInfo("MControl", "ModuleName");
        
        [ID()]
        public virtual string ID {
            get {
                return this.mID;
            }
            set {
                this.mID = value;
                this.EntityState.FieldChange("ID");
            }
        }
        
        [Column()]
        [EnumToString()]
        public virtual ControlType Type {
            get {
                return this.mType;
            }
            set {
                this.mType = value;
                this.EntityState.FieldChange("Type");
            }
        }
        
        [Column()]
        public virtual string ParentID {
            get {
                return this.mParentID;
            }
            set {
                this.mParentID = value;
                this.EntityState.FieldChange("ParentID");
            }
        }
        
        [Column()]
        public virtual string Remark {
            get {
                return this.mRemark;
            }
            set {
                this.mRemark = value;
                this.EntityState.FieldChange("Remark");
            }
        }
        
        [Column()]
        public virtual string Width {
            get {
                return this.mWidth;
            }
            set {
                this.mWidth = value;
                this.EntityState.FieldChange("Width");
            }
        }
        
        [Column()]
        [BoolToInt()]
        public virtual bool Clear {
            get {
                return this.mClear;
            }
            set {
                this.mClear = value;
                this.EntityState.FieldChange("Clear");
            }
        }
        
        [Column()]
        [EnumToString()]
        public virtual FloatType Float {
            get {
                return this.mFloat;
            }
            set {
                this.mFloat = value;
                this.EntityState.FieldChange("Float");
            }
        }
        
        [Column()]
        [BoolToInt()]
        public virtual bool IsPanel {
            get {
                return this.mIsPanel;
            }
            set {
                this.mIsPanel = value;
                this.EntityState.FieldChange("IsPanel");
            }
        }
        
        [Column()]
        [BoolToInt()]
        public virtual bool IsViewItem {
            get {
                return this.mIsViewItem;
            }
            set {
                this.mIsViewItem = value;
                this.EntityState.FieldChange("IsViewItem");
            }
        }
        
        [Column()]
        [DefaultInt(0)]
        public virtual int Level {
            get {
                return this.mLevel;
            }
            set {
                this.mLevel = value;
                this.EntityState.FieldChange("Level");
            }
        }
        
        [Column()]
        public virtual string ModuleName {
            get {
                return this.mModuleName;
            }
            set {
                this.mModuleName = value;
                this.EntityState.FieldChange("ModuleName");
            }
        }
    }
}
